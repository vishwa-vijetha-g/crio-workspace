/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package QKART_SANITY_LOGIN.Module1;

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Set;
import java.util.concurrent.TimeUnit;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.remote.BrowserType;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

public class QkartSanity {

    public static String lastGeneratedUserName;


    public static RemoteWebDriver createDriver() throws MalformedURLException {
        // Launch Browser using Zalenium
        final DesiredCapabilities capabilities = new DesiredCapabilities();
        capabilities.setBrowserName(BrowserType.CHROME);
        RemoteWebDriver driver = new RemoteWebDriver(new URL("http://localhost:8082/wd/hub"), capabilities);

        return driver;
    }

    public static void logStatus(String type, String message, String status) {

        System.out.println(String.format("%s |  %s  |  %s | %s", String.valueOf(java.time.LocalDateTime.now()), type,
                message, status));
    }

    public static void takeScreenshot(WebDriver driver, String screenshotType, String description) {
        // TODO: CRIO_TASK_MODULE_SYNCHRONISATION - Implement method using below steps
        /*
         * 1. Check if the folder "/screenshots" exists, create if it doesn't
         * 2. Generate a unique string using the timestamp
         * 3. Capture screenshot
         * 4. Save the screenshot inside the "/screenshots" folder using the following
         * naming convention: screenshot_<Timestamp>_<ScreenshotType>_<Description>.png
         * eg: screenshot_2022-03-05T06:59:46.015489_StartTestcase_Testcase01.png
         */

        try {
            File theDir = new File("/screenshots");
            if (!theDir.exists()) {
              theDir.mkdirs();
            }
      
            String timestamp = String.valueOf(java.time.LocalDateTime.now());
            String fileName = String.format("screenshot_%s_%s_%s.png", timestamp, screenshotType, description);
      
            TakesScreenshot scrShot = ((TakesScreenshot) driver);
            File SrcFile = scrShot.getScreenshotAs(OutputType.FILE);
      
            File DestFile = new File("screenshots/" + fileName);
            FileUtils.copyFile(SrcFile, DestFile);
        }
      catch (Exception e) {
            e.printStackTrace();
        }


    }

    /*
     * Testcase01: Verify the functionality of Login button on the Home page
     */
    public static Boolean TestCase01(RemoteWebDriver driver) throws InterruptedException {
        Boolean status;
        logStatus("Start TestCase", "Test Case 1: Verify User Registration", "DONE");
        takeScreenshot(driver, "TestCaseStart", "TestCase01");

        // Visit the Registration page and register a new user
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("TestCase 1", "Test Case Pass. User Registration Pass", "FAIL");
            takeScreenshot(driver, "TestCaseFail", "TestCase01");
            logStatus("End TestCase", "Test Case 1: Verify user Registration : ", status ? "PASS" : "FAIL");
            takeScreenshot(driver, "TestCaseEnd", "TestCase01");
            

            // Return False as the test case Fails
            return false;
        } else {
            logStatus("TestCase 1", "Test Case Pass. User Registration Pass", "PASS");
        }

        // Save the last generated username
        lastGeneratedUserName = registration.lastGeneratedUsername;

        // Visit the login page and login with the previuosly registered user
        Login login = new Login(driver);
        login.navigateToLoginPage();
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        logStatus("Test Step", "User Perform Login: ", status ? "PASS" : "FAIL");
        if (!status) {
            logStatus("End TestCase", "Test Case 1: Verify user Registration : ", status ? "PASS" : "FAIL");
            takeScreenshot(driver, "TestCaseEnd", "TestCase01");
            return false;
        }

        // Visit the home page and log out the logged in user
        Home home = new Home(driver);
        status = home.PerformLogout();
        logStatus("End TestCase", "Test Case 1: Verify user Registration : ", status ? "PASS" : "FAIL");
        takeScreenshot(driver, "TestCaseEnd", "TestCase01");

        return status;
    }

    /*
     * Verify that an existing user is not allowed to re-register on QKart
     */
    public static Boolean TestCase02(RemoteWebDriver driver) throws InterruptedException {
        Boolean status;
        logStatus("Start Testcase", "Test Case 2: Verify User Registration with an existing username ", "DONE");
        takeScreenshot(driver, "TestCaseStart", "TestCase02");
        // Visit the Registration page and register a new user
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        status = registration.registerUser("testUser", "abc@123", true);
        logStatus("Test Step", "User Registration : ", status ? "PASS" : "FAIL");
        if (!status) {
            logStatus("End TestCase", "Test Case 2: Verify user Registration : ", status ? "PASS" : "FAIL");
            takeScreenshot(driver, "TestCaseEnd", "TestCase02");
            return false;

        }

        // Save the last generated username
        lastGeneratedUserName = registration.lastGeneratedUsername;

        // Visit the Registration page and try to register using the previously
        // registered user's credentials
        registration.navigateToRegisterPage();
        status = registration.registerUser(lastGeneratedUserName, "abc@123", false);

        // If status is true, then registration succeeded, else registration has
        // failed. In this case registration failure means Success
        logStatus("End TestCase", "Test Case 2: Verify user Registration : ", status ? "FAIL" : "PASS");
        takeScreenshot(driver, "TestCaseEnd", "TestCase02");
        return !status;
    }

    /*
     * Verify the functinality of the search text box
     */
    public static Boolean TestCase03(RemoteWebDriver driver) throws InterruptedException {
        logStatus("TestCase 3", "Start test case : Verify functionality of search box ", "DONE");
        takeScreenshot(driver, "TestCaseStart", "TestCase03");
        boolean status;

        // Visit the home page
        Home homePage = new Home(driver);
        homePage.navigateToHome();

        // SLEEP_STMT_01 : Wait for Page to Load
        //Thread.sleep(5000);
        //Removed above unwanted sleep statement

        // Search for the "yonex" product
        status = homePage.searchForProduct("yonex");
        if (!status) {
            logStatus("TestCase 3", "Test Case Failure. Unable to search for given product", "FAIL");
            takeScreenshot(driver, "TestCaseFail", "TestCase03");
            return false;
        }

        
        // Fetch the search results
        List<WebElement> searchResults = homePage.getSearchResults();

        // Verify the search results are available
        if (searchResults.size() == 0) {
            logStatus("TestCase 3", "Test Case Failure. There were no results for the given search string", "FAIL");
            takeScreenshot(driver, "TestCaseFail", "TestCase03");
            return false;
        }

        for (WebElement webElement : searchResults) {
            // Create a SearchResult object from the parent element
            SearchResult resultelement = new SearchResult(webElement);

            // Verify that all results contain the searched text
            String elementText = resultelement.getTitleofResult();
            if (!elementText.toUpperCase().contains("YONEX")) {
                logStatus("TestCase 3", "Test Case Failure. Test Results contains un-expected values: " + elementText,
                        "FAIL");
                takeScreenshot(driver, "TestCaseFail", "TestCase03");
                return false;
            }
        }

        logStatus("Step Success", "Successfully validated the search results ", "PASS");
        // SLEEP_STMT_02
        //optimization - suspicious - Thread.sleep(2000);

        // Search for product
        status = homePage.searchForProduct("Gesundheit");
        if (!status) {
            logStatus("TestCase 3", "Test Case Failure. Unable to search for given product", "FAIL");
            takeScreenshot(driver, "TestCaseFail", "TestCase03");
            return false;
        }

        // Verify no search results are found
        searchResults = homePage.getSearchResults();
        if (searchResults.size() == 0) {
            if (homePage.isNoResultFound()) {
                logStatus("Step Success", "Successfully validated that no products found message is displayed", "PASS");
            }
            logStatus("TestCase 3", "Test Case PASS. Verified that no search results were found for the given text",
                    "PASS");
        } else {
            logStatus("TestCase 3", "Test Case Fail. Expected: no results , actual: Results were available", "FAIL");
            takeScreenshot(driver, "TestCaseFail", "TestCase03");
            return false;
        }

        takeScreenshot(driver, "TestCaseEnd", "TestCase03");
        return true;

    }

    /*
     * Verify the presence of size chart and check if the size chart content is as
     * expected
     */
    public static Boolean TestCase04(RemoteWebDriver driver) throws InterruptedException {
        logStatus("TestCase 4", "Start test case : Verify the presence of size Chart", "DONE");
        takeScreenshot(driver, "TestCaseStart", "TestCase04");
        boolean status = false;

        // Visit home page
        Home homePage = new Home(driver);
        homePage.navigateToHome();

        // SLEEP_STMT_03 : Wait for page to load
        //optimization - Thread.sleep(5000);

        // Search for product and get card content element of search results
        status = homePage.searchForProduct("Running Shoes");
        List<WebElement> searchResults = homePage.getSearchResults();

        // Create expected values
        List<String> expectedTableHeaders = Arrays.asList("Size", "UK/INDIA", "EU", "HEEL TO TOE");
        List<List<String>> expectedTableBody = Arrays.asList(Arrays.asList("6", "6", "40", "9.8"),
                Arrays.asList("7", "7", "41", "10.2"), Arrays.asList("8", "8", "42", "10.6"),
                Arrays.asList("9", "9", "43", "11"), Arrays.asList("10", "10", "44", "11.5"),
                Arrays.asList("11", "11", "45", "12.2"), Arrays.asList("12", "12", "46", "12.6"));

        // Verify size chart presence and content matching for each search result
        for (WebElement webElement : searchResults) {
            SearchResult result = new SearchResult(webElement);

            // Verify if the size chart exists for the search result
            if (result.verifySizeChartExists()) {
                logStatus("Step Success", "Successfully validated presence of Size Chart Link", "PASS");

                // Verify if size dropdown exists
                status = result.verifyExistenceofSizeDropdown(driver);
                logStatus("Step Success", "Validated presence of drop down", status ? "PASS" : "FAIL");

                // Open the size chart
                if (result.openSizechart()) {
                    // Verify if the size chart contents matches the expected values
                    if (result.validateSizeChartContents(expectedTableHeaders, expectedTableBody, driver)) {
                        logStatus("Step Success", "Successfully validated contents of Size Chart Link", "PASS");
                    } else {
                        logStatus("Step Failure", "Failure while validating contents of Size Chart Link", "FAIL");
                        takeScreenshot(driver, "TestCaseFail", "TestCase04");
                    }

                    // Close the size chart modal
                    status = result.closeSizeChart(driver);

                } else {
                    logStatus("TestCase 4", "Test Case Fail. Failure to open Size Chart", "FAIL");
                    takeScreenshot(driver, "TestCaseFail", "TestCase04");
                    return false;
                }

            } else {
                logStatus("TestCase 4", "Test Case Fail. Size Chart Link does not exist", "FAIL");
                takeScreenshot(driver, "TestCaseFail", "TestCase04");
                return false;
            }
        }
        logStatus("TestCase 4", "Test Case PASS. Validated Size Chart Details", "PASS");
        takeScreenshot(driver, "TestCaseEnd", "TestCase04");
        return status;
    }

    /*
     * Verify the complete flow of checking out and placing order for products is
     * working correctly
     */
    public static Boolean TestCase05(RemoteWebDriver driver) throws InterruptedException {
        Boolean status;
        logStatus("Start TestCase", "Test Case 5: Verify Happy Flow of buying products", "DONE");
        takeScreenshot(driver, "TestCaseStart", "TestCase05");

        // Go to the Register page
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();

        // Register a new user
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("TestCase 5", "Test Case Failure. Happy Flow Test Failed", "FAIL");
            takeScreenshot(driver, "TestCaseFail", "TestCase05");
        }

        // Save the username of the newly registered user
        lastGeneratedUserName = registration.lastGeneratedUsername;

        // Go to the login page
        Login login = new Login(driver);
        login.navigateToLoginPage();

        // Login with the newly registered user's credentials
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase", "Test Case 5: Happy Flow Test Failed : ", status ? "PASS" : "FAIL");
            takeScreenshot(driver, "TestCaseEnd", "TestCase05");
        }

        // Go to the home page
        Home homePage = new Home(driver);
        homePage.navigateToHome();

        // Find required products by searching and add them to the user's cart
        status = homePage.searchForProduct("Yonex");
        homePage.addProductToCart("YONEX Smash Badminton Racquet");
        status = homePage.searchForProduct("Tan");
        homePage.addProductToCart("Tan Leatherette Weekender Duffle");

        // Click on the checkout button
        homePage.clickCheckout();

        // Add a new address on the Checkout page and select it
        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

        // Place the order
        checkoutPage.placeOrder();
        // SLEEP_STMT_04: Wait for place order to succeed and navigate to Thanks page
        //Thread.sleep(3000);
        //Adding a better wait statement rather than using sleep
        WebDriverWait wait = new WebDriverWait(driver, 5);
        wait.until(ExpectedConditions.urlToBe("https://crio-qkart-frontend-qa.vercel.app/thanks"));



        // Check if placing order redirected to the Thansk page
        status = driver.getCurrentUrl().endsWith("/thanks");

        // Go to the home page
        homePage.navigateToHome();
        // SLEEP_STMT_05 : Wait for Page Load
        //optimization - Thread.sleep(3000);

        // Log out the user
        homePage.PerformLogout();

        logStatus("End TestCase", "Test Case 5: Happy Flow Test Completed : ", status ? "PASS" : "FAIL");
        takeScreenshot(driver, "TestCaseEnd", "TestCase05");
        return status;
    }

    /*
     * Verify the quantity of items in cart can be updated
     */
    public static Boolean TestCase06(RemoteWebDriver driver) throws InterruptedException {
        Boolean status;
        logStatus("Start TestCase", "Test Case 6: Verify that cart can be edited", "DONE");
        takeScreenshot(driver, "TestCaseStart", "TestCase06");
        Home homePage = new Home(driver);
        Register registration = new Register(driver);
        Login login = new Login(driver);

        // TODO: CRIO_TASK_MODULE_TEST_AUTOMATION - TEST CASE 06: MILESTONE 5

        // TODO: Register a new user

        // TODO: Login using the newly registed user

        // TODO: Add "Xtend Smart Watch" to cart

        // TODO: Add "Yarine Floor Lamp" to cart

        // Go to the Register page
        registration.navigateToRegisterPage();

        // Register a new user
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("TestCase 6", "Test Case Failure. Happy Flow Test Failed", "FAIL");
            takeScreenshot(driver, "TestCaseFail", "TestCase06");
        }

        // Save the username of the newly registered user
        lastGeneratedUserName = registration.lastGeneratedUsername;

        // Go to the login page
        login.navigateToLoginPage();

        // Login with the newly registered user's credentials
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase", "Test Case 6: Happy Flow Test Failed : ", status ? "PASS" : "FAIL");
            takeScreenshot(driver, "TestCaseEnd", "TestCase06");
        }

        // Go to the home page

        homePage.navigateToHome();

        // Find required products by searching and add them to the user's cart
        status = homePage.searchForProduct("Xtend");
        homePage.addProductToCart("Xtend Smart Watch");
        status = homePage.searchForProduct("Yarine");
        homePage.addProductToCart("Yarine Floor Lamp");

        // update watch quantity to 2
        homePage.changeProductQuantityinCart("Xtend Smart Watch", 2);
        // SLEEP_STMT_06: Wait for changing the product quantity in the cart
        //optimization - Thread.sleep(3000);
        // update table lamp quantity to 0
        homePage.changeProductQuantityinCart("Yarine Floor Lamp", 0);
        // SLEEP_STMT_07 : Wait for changing the product quantity in the cart
        //optimization - Thread.sleep(3000);
        // update watch quantity again to 1
        homePage.changeProductQuantityinCart("Xtend Smart Watch", 1);

        homePage.clickCheckout();

        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

        checkoutPage.placeOrder();
        // SLEEP_STMT_08 : Wait until the place order succeeds and navigates to success page
        //optimization 2 -Thread.sleep(3000);

        status = driver.getCurrentUrl().endsWith("/thanks");

        homePage.navigateToHome();
        // SLEEP_STMT_09
        //optimization - Thread.sleep(3000);
        homePage.PerformLogout();

        logStatus("End TestCase", "Test Case 6: Verify that cart can be edited: ", status ? "PASS" : "FAIL");
        takeScreenshot(driver, "TestCaseEnd", "TestCase06");       
        return status;
    }


    public static Boolean TestCase07(RemoteWebDriver driver) throws InterruptedException {
        Boolean status;
        logStatus("Start TestCase",
                "Test Case 7: Verify that insufficient balance error is thrown when the wallet balance is not enough",
                "DONE");
        takeScreenshot(driver, "TestCaseStart", "TestCase07");

        Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("Step Failure", "User Perform Registration Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase",
                    "Test Case 7: Verify that insufficient balance error is thrown when the wallet balance is not enough: ",
                    status ? "PASS" : "FAIL");
                    takeScreenshot(driver, "TestCaseEnd", "TestCase07");
            return false;
        }
        lastGeneratedUserName = registration.lastGeneratedUsername;

        Login login = new Login(driver);
        login.navigateToLoginPage();
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase",
                    "Test Case 7: Verify that insufficient balance error is thrown when the wallet balance is not enough: ",
                    status ? "PASS" : "FAIL");
                    takeScreenshot(driver, "TestCaseEnd", "TestCase07");
            return false;
        }

        Home homePage = new Home(driver);
        homePage.navigateToHome();
        status = homePage.searchForProduct("Stylecon");
        homePage.addProductToCart("Stylecon 9 Seater RHS Sofa Set");
        // SLEEP_STMT_10 : Wait until the product is added to the cart
        //optimization - Thread.sleep(3000);

        homePage.changeProductQuantityinCart("Stylecon 9 Seater RHS Sofa Set", 10);

        homePage.clickCheckout();

        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

        checkoutPage.placeOrder();
        // SLEEP_STMT_11
        //optimization 2 - Thread.sleep(3000);

        status = checkoutPage.verifyInsufficientBalanceMessage();

        logStatus("End TestCase",
                "Test Case 7: Verify that insufficient balance error is thrown when the wallet balance is not enough: ",
                status ? "PASS" : "FAIL");
        
        takeScreenshot(driver, "TestCaseEnd", "TestCase07");

        return status;
    }

    public static Boolean TestCase08(RemoteWebDriver driver) throws InterruptedException {
        Boolean status;
        logStatus("Start TestCase", "Test Case 8: Test Case for Multitab Scenario", "DONE");
        takeScreenshot(driver, "TestCaseStart", "TestCase08");

        // Go to the Register page
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();

        // Register a new user
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("TestCase 8", "Test Case Failure. Happy Flow Test Failed", "FAIL");
            takeScreenshot(driver, "TestCaseFail", "TestCase08");
        }

        // Save the username of the newly registered user
        lastGeneratedUserName = registration.lastGeneratedUsername;

        // Go to the login page
        Login login = new Login(driver);
        login.navigateToLoginPage();

        // Login with the newly registered user's credentials
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase", "Test Case 8: Happy Flow Test Failed : ", status ? "PASS" : "FAIL");
            takeScreenshot(driver, "TestCaseEnd", "TestCase05");
        }

        // Go to the home page
        Home homePage = new Home(driver);
        homePage.navigateToHome();

        // Find required products by searching and add them to the user's cart
        status = homePage.searchForProduct("Yonex");
        homePage.addProductToCart("YONEX Smash Badminton Racquet");

        //Step 6
        String parentTab = driver.getWindowHandle();
        driver.findElement(By.xpath("//a[@href='privacy-policy']")).click();
        Thread.sleep(2000);
        Set<String> allTabs = driver.getWindowHandles();
        for(String tab:allTabs){
            if(!tab.equals(parentTab)){
                driver.switchTo().window(tab);
            }
        }
        homePage.navigateToHome();

        //Step 7
        status = homePage.verifyCartContents(new ArrayList<>(Arrays.asList("YONEX Smash Badminton Racquet")));

        logStatus("End TestCase", "Test Case 8: Verify that the contents of the cart are present in new tab: ", status ? "PASS" : "FAIL");
        takeScreenshot(driver, "TestCaseEnd", "TestCase08"); 

        driver.close();
        driver.switchTo().window(parentTab);
        homePage.PerformLogout();

        return status;


    }

    public static Boolean TestCase09(RemoteWebDriver driver) throws InterruptedException {
        // TODO: CRIO_TASK_MODULE_SYNCHRONISATION -
        Boolean status;
        logStatus("Start TestCase", "Test Case 9: Verify Privacy Policy and Terms of Service", "DONE");
        takeScreenshot(driver, "TestCaseStart", "TestCase09");

        // Go to the home page
        Home homePage = new Home(driver);
        homePage.navigateToHome();

        String parentTab = driver.getWindowHandle();
        driver.findElement(By.xpath("//a[@href='privacy-policy']")).click();
        Thread.sleep(2000);
        status = driver.getCurrentUrl().equals("https://crio-qkart-frontend-qa.vercel.app/");

        if(!status){
            logStatus("Step Failure", "Verify that the url of the current tab does not change: ", status ? "PASS" : "FAIL");
            return status;

        }

        Set<String> allTabs = driver.getWindowHandles();
        String childTab1 = "";
        for(String tab:allTabs){
            if(!tab.equals(parentTab)){
                childTab1=tab;
                driver.switchTo().window(tab);
            }
        }

        status = driver.findElement(By.xpath("//h2")).getText().equals("Privacy Policy");

        if(!status){
            logStatus("Step Failure", "Check if the privacy policy content is available on the newly opened tab: ", status ? "PASS" : "FAIL");
            return status;

        }

        //driver.close();
        driver.switchTo().window(parentTab);



        driver.findElement(By.xpath("//a[@href='terms-of-service']")).click();
        Thread.sleep(2000);
        status = driver.getCurrentUrl().equals("https://crio-qkart-frontend-qa.vercel.app/");

        if(!status){
            logStatus("Step Failure", "Verify that the url of the current tab does not change: ", status ? "PASS" : "FAIL");
            return status;

        }

        Set<String> allTabs2 = driver.getWindowHandles();
        for(String tab:allTabs2){
            if(!tab.equals(parentTab) && !tab.equals(childTab1)){
                driver.switchTo().window(tab);
            }
        }

        status = driver.findElement(By.xpath("//h2")).getText().equals("Terms of Service");

        if(!status){
            logStatus("Step Failure", "Check if the terms of service content is available on the newly opened tab: ", status ? "PASS" : "FAIL");
            return status;

        }

        driver.close();
        driver.switchTo().window(childTab1);
        driver.close();
        driver.switchTo().window(parentTab);
        // driver.close();

        logStatus("End TestCase", "Test Case 9: Verify Privacy Policy and Terms of Service", status ? "PASS" : "FAIL");
        takeScreenshot(driver, "TestCaseEnd", "TestCase09");
        return status;


        
    }

    public static Boolean TestCase10(RemoteWebDriver driver) throws InterruptedException {
        Boolean status=false;
        // TODO: CRIO_TASK_MODULE_SYNCHRONISATION -
        try{
            
            logStatus("Start TestCase", "Test Case 10: Verify Contact Now", "DONE");
            takeScreenshot(driver, "TestCaseStart", "TestCase19");

            // Go to the home page
            Home homePage = new Home(driver);
            homePage.navigateToHome();

            
            driver.findElement(By.xpath("//p[text()='Contact us']")).click();
            WebDriverWait wait = new WebDriverWait(driver,5);
            wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//*[@class='card-block']")));

            driver.findElement(By.xpath("//input[@placeholder='Name']")).sendKeys("crio user");
            driver.findElement(By.xpath("//input[@placeholder='Email']")).sendKeys("criouser@gmail.com");
            driver.findElement(By.xpath("//input[@placeholder='Message']")).sendKeys("Testing the contact us page");
            driver.findElement(By.xpath("//button[text()=' Contact Now']")).click();

            wait.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath("//*[@class='card-block']")));

            status = true;
            logStatus("End TestCase", "Test Case 10: Verify Contact Now", status ? "PASS" : "FAIL");
            takeScreenshot(driver, "TestCaseEnd", "TestCase10");
            
            
        }
        catch(Exception e){
            
            logStatus("Step Failure", e.getMessage(), "FAIL");
        }

        return status;
    }

    public static Boolean TestCase11(RemoteWebDriver driver) throws InterruptedException {
        
        // TODO: CRIO_TASK_MODULE_SYNCHRONISATION -

        Boolean status=false;
        logStatus("Start TestCase", "Test Case 11: Check for advertisements", "DONE");
        takeScreenshot(driver, "TestCaseStart", "TestCase11");

        // Go to the Register page
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();

        // Register a new user
        status = registration.registerUser("testUser", "abc@123", true);

        if (!status) {
            logStatus("TestCase 11", "Test Case Failure. Happy Flow Test Failed", "FAIL");
            takeScreenshot(driver, "TestCaseFail", "TestCase11");
        }

        // Save the username of the newly registered user
        lastGeneratedUserName = registration.lastGeneratedUsername;

        // Go to the login page
        Login login = new Login(driver);
        login.navigateToLoginPage();

        // Login with the newly registered user's credentials
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");

        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase", "Test Case 11: Happy Flow Test Failed : ", status ? "PASS" : "FAIL");
            takeScreenshot(driver, "TestCaseEnd", "TestCase11");
        }

        // Go to the home page
        Home homePage = new Home(driver);
        homePage.navigateToHome();

        // Find required products by searching and add them to the user's cart
        status = homePage.searchForProduct("Yonex");

        if (!status) {
            logStatus("Step Failure", "Search for product Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase", "Test Case 11: Happy Flow Test Failed : ", status ? "PASS" : "FAIL");
            takeScreenshot(driver, "TestCaseEnd", "TestCase11");
        }

        homePage.addProductToCart("YONEX Smash Badminton Racquet");

        // Click on the checkout button
        homePage.clickCheckout();

        // Add a new address on the Checkout page and select it
        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

        // Place the order
        checkoutPage.placeOrder();
        // SLEEP_STMT_04: Wait for place order to succeed and navigate to Thanks page
        //Thread.sleep(3000);
        //Adding a better wait statement rather than using sleep
        WebDriverWait wait = new WebDriverWait(driver, 5);
        wait.until(ExpectedConditions.urlToBe("https://crio-qkart-frontend-qa.vercel.app/thanks"));



        // Check if placing order redirected to the Thansk page
        status = driver.getCurrentUrl().endsWith("/thanks");

        if (!status) {
            logStatus("Step Failure", "Order Placing and redirection Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase", "Test Case 11: Happy Flow Test Failed : ", status ? "PASS" : "FAIL");
            takeScreenshot(driver, "TestCaseEnd", "TestCase11");
        }

        
        List<WebElement> advts = driver.findElements(By.xpath("//iframe"));

        if(advts.size()!=3){
            status = false;
            logStatus("Step Failure", "Advertise check Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase", "Test Case 11: Happy Flow Test Failed : ", status ? "PASS" : "FAIL");
            takeScreenshot(driver, "TestCaseEnd", "TestCase11");
        }
        else{
            status = true;
        }

        //button[text()='Buy Now']

        for(int i=0;i<2;i++){
            driver.switchTo().frame(i);
            driver.findElement(By.xpath("//button[text()='Buy Now']")).click();
            driver.switchTo().parentFrame();

            status = driver.getCurrentUrl().equals("https://crio-qkart-frontend-qa.vercel.app/checkout");
            driver.navigate().back();

            if(!status){
                logStatus("Step Failure", "Buy Now button is Clickable", status ? "PASS" : "FAIL");
                logStatus("End TestCase", "Test Case 11: Happy Flow Test Failed : ", status ? "PASS" : "FAIL");
                takeScreenshot(driver, "TestCaseEnd", "TestCase11");
                break;
            }
            
            
            
        }
        
        homePage.navigateToHome();

        logStatus("End TestCase", "Test Case 11: Check for advertisements ", status ? "PASS" : "FAIL");
        takeScreenshot(driver, "TestCaseEnd", "TestCase11");
        return status;

    }

    public static void main(String[] args) throws InterruptedException, MalformedURLException {
        int totalTests = 0;
        int passedTests = 0;
        Boolean status;
        // Maximize and Implicit Wait for things to initailize
        RemoteWebDriver driver = createDriver();
        driver.manage().window().maximize();
        driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);

        try {
            // Execute Test Case 1
            totalTests += 1;
            status = TestCase01(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");

            //  Execute Test Case 2
            totalTests += 1;
            status = TestCase02(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");
            // Execute Test Case 3
            totalTests += 1;
            status = TestCase03(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 4
            totalTests += 1;
            status = TestCase04(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 5
            totalTests += 1;
            status = TestCase05(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 6
            totalTests += 1;
            status = TestCase06(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 7
            totalTests += 1;
            status = TestCase07(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("");


            // Execute Test Case 8
            totalTests += 1;
            status = TestCase08(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 9
            totalTests += 1;
            status = TestCase09(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 10
            totalTests += 1;
            status = TestCase10(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 11
            totalTests += 1;
            status = TestCase11(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("");
            
        } catch (Exception e) {
            throw e;
        } finally {
            // quit Chrome Driver
            driver.quit();

            System.out.println(String.format("%s out of %s test cases Passed ", Integer.toString(passedTests),
                    Integer.toString(totalTests)));
        }

    }
}
